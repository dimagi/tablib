{"body": "<div class=\"section\" id=\"development\">\n<span id=\"id1\"></span><h1>Development<a class=\"headerlink\" href=\"#development\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Tablib is under active development, and contributors are welcome.</p>\n<p>If you have a feature request, suggestion, or bug report, please open a new issue on <a class=\"reference external\" href=\"http://github.com/kennethreitz/tablib/\">GitHub</a>. To submit patches, please send a pull request on <a class=\"reference external\" href=\"http://github.com/kennethreitz/tablib/\">GitHub</a>.</p>\n<p>If you&#8217;d like to contribute, there&#8217;s plenty to do. Here&#8217;s a short todo list.</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li>Add seperator support to HTML out</li>\n<li>Hooks System\n- pre/post-append\n- pre/post-import\n- pre/post-export</li>\n<li>Big Data</li>\n<li>Backwards-compatible OrderedDict support</li>\n<li>Write more exhausive unit-tests.</li>\n<li>Write stress tests.</li>\n<li>Make CSV write customizable.</li>\n<li>Integrate django-tablib</li>\n<li>Mention django-tablib in Documention</li>\n<li>Dataset title usage in documentation (#17)</li>\n</ul>\n</div></blockquote>\n<div class=\"section\" id=\"design-considerations\">\n<span id=\"design\"></span><h2>Design Considerations<a class=\"headerlink\" href=\"#design-considerations\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Tablib was developed with a few <span class=\"target\" id=\"index-0\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0020\"><strong>PEP 20</strong></a> idioms in mind.</p>\n<ol class=\"arabic simple\">\n<li>Beautiful is better than ugly.</li>\n<li>Explicit is better than implicit.</li>\n<li>Simple is better than complex.</li>\n<li>Complex is better than complicated.</li>\n<li>Readability counts.</li>\n</ol>\n<p>A few other things to keep in mind:</p>\n<ol class=\"arabic simple\">\n<li>Keep your code DRY.</li>\n<li>Strive to be as simple (to use) as possible.</li>\n</ol>\n</div>\n<div class=\"section\" id=\"source-control\">\n<span id=\"scm\"></span><h2>Source Control<a class=\"headerlink\" href=\"#source-control\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Tablib source is controlled with <a class=\"reference external\" href=\"http://git-scm.org\">Git</a>, the lean, mean, distributed source control machine.</p>\n<p>The repository is publicly accessable.</p>\n<blockquote>\n<div><tt class=\"docutils literal\"><span class=\"pre\">git</span> <span class=\"pre\">clone</span> <span class=\"pre\">git://github.com/kennethreitz/tablib.git</span></tt></div></blockquote>\n<p>The project is hosted both on <strong>GitHub</strong> and <strong>git.kennethreitz.com</strong>.</p>\n<blockquote>\n<div><dl class=\"docutils\">\n<dt>GitHub:</dt>\n<dd><a class=\"reference external\" href=\"http://github.com/kennethreitz/tablib\">http://github.com/kennethreitz/tablib</a></dd>\n<dt>&#8220;Mirror&#8221;:</dt>\n<dd><a class=\"reference external\" href=\"http://git.kennethreitz.com/projects/tablib\">http://git.kennethreitz.com/projects/tablib</a></dd>\n</dl>\n</div></blockquote>\n<div class=\"section\" id=\"git-branch-structure\">\n<h3>Git Branch Structure<a class=\"headerlink\" href=\"#git-branch-structure\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Feature / Hotfix / Release branches follow a <a class=\"reference external\" href=\"http://nvie.com/posts/a-successful-git-branching-model/\">Successful Git Branching Model</a> . <a class=\"reference external\" href=\"http://github.com/nvie/gitflow\">Git-flow</a> is a great tool for managing the repository. I highly recommend it.</p>\n<dl class=\"docutils\">\n<dt><tt class=\"docutils literal\"><span class=\"pre\">develop</span></tt></dt>\n<dd>The &#8220;next release&#8221; branch. Likely unstable.</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">master</span></tt></dt>\n<dd>Current production release (0.9.3) on PyPi.</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">gh-pages</span></tt></dt>\n<dd>Current release of <a class=\"reference external\" href=\"http://tablib.org\">http://tablib.org</a>.</dd>\n</dl>\n<p>Each release is tagged.</p>\n<p>When submitting patches, please place your feature/change in its own branch prior to opening a pull reqeust on <a class=\"reference external\" href=\"http://github.com/kennethreitz/tablib/\">GitHub</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"adding-new-formats\">\n<span id=\"newformats\"></span><h2>Adding New Formats<a class=\"headerlink\" href=\"#adding-new-formats\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Tablib welcomes new format additions! Format suggestions include:</p>\n<ul class=\"simple\">\n<li>Tab Seperated Values</li>\n<li>MySQL Dump</li>\n<li>HTML Table</li>\n</ul>\n<div class=\"section\" id=\"coding-by-convention\">\n<h3>Coding by Convention<a class=\"headerlink\" href=\"#coding-by-convention\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Tablib features a micro-framework for adding format support. The easiest way to understand it is to use it. So, let&#8217;s define our own format, named <em>xxx</em>.</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Write a new format interface.</p>\n<blockquote>\n<div><p><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">tablib.core</span></tt> follows a simple pattern for automatically utilizing your format throughout Tablib. Function names are crucial.</p>\n<p>Example <strong>tablib/formats/_xxx.py</strong>:</p>\n<div class=\"highlight-python\"><div class=\"highlight\"><pre><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">&#39;xxx&#39;</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">export_set</span><span class=\"p\">(</span><span class=\"n\">dset</span><span class=\"p\">):</span>\n    <span class=\"o\">....</span>\n    <span class=\"c\"># returns string representation of given dataset</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">export_book</span><span class=\"p\">(</span><span class=\"n\">dbook</span><span class=\"p\">):</span>\n    <span class=\"o\">....</span>\n    <span class=\"c\"># returns string representation of given databook</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">import_set</span><span class=\"p\">(</span><span class=\"n\">dset</span><span class=\"p\">,</span> <span class=\"n\">in_stream</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"c\"># populates given Dataset with given datastream</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">import_book</span><span class=\"p\">(</span><span class=\"n\">dbook</span><span class=\"p\">,</span> <span class=\"n\">in_stream</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"c\"># returns Databook instance</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">detect</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"c\"># returns True if given stream is parsable as xxx</span>\n</pre></div>\n</div>\n</div></blockquote>\n</li>\n</ol>\n<div class=\"admonition-excluding-support admonition \">\n<p class=\"first admonition-title\">Excluding Support</p>\n<p class=\"last\">If the format excludes support for an import/export mechanism (<em>eg.</em> <a class=\"reference internal\" href=\"../api/#tablib.Dataset.csv\" title=\"tablib.Dataset.csv\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">csv</span></tt></a> excludes <a class=\"reference internal\" href=\"../api/#tablib.Databook\" title=\"tablib.Databook\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Databook</span></tt></a> support), simply don&#8217;t define the respective functions. Appropriate errors will be raised.</p>\n</div>\n<ol class=\"arabic simple\" start=\"2\">\n<li>Add your new format module to the <tt class=\"xref py py-class docutils literal\"><span class=\"pre\">tablib.formats.avalable</span></tt> tuple.</li>\n<li>Add a mock property to the <a class=\"reference internal\" href=\"../api/#tablib.Dataset\" title=\"tablib.Dataset\"><tt class=\"xref py py-class docutils literal\"><span class=\"pre\">Dataset</span></tt></a> class with verbose <a class=\"reference external\" href=\"http://docutils.sourceforge.net/rst.html\">reStructured Text</a> docstring. This alleviates IDE confusion, and allows for pretty auto-generated <a class=\"reference external\" href=\"http://sphinx.pocoo.org\">Sphinx</a> documentation.</li>\n<li>Write respective <a class=\"reference internal\" href=\"#testing\"><em>tests</em></a>.</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"testing-tablib\">\n<span id=\"testing\"></span><h2>Testing Tablib<a class=\"headerlink\" href=\"#testing-tablib\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Testing is crucial to Tablib&#8217;s stability. This stable project is used in production by many companies and developers, so it is important to be certain that every version released is fully operational. When developing a new feature for Tablib, be sure to write proper tests for it as well.</p>\n<p>When developing a feature for Tablib, the easiest way to test your changes for potential issues is to simply run the test suite directly.</p>\n<div class=\"highlight-python\"><pre>$ ./test_tablib.py</pre>\n</div>\n<p><a class=\"reference external\" href=\"http://hudson.dev.java.net\">Hudson CI</a>, amongst other tools, supports Java&#8217;s xUnit testing report format. <a class=\"reference external\" href=\"http://somethingaboutorange.com/mrl/projects/nose/\">Nose</a> allows us to generate our own xUnit reports.</p>\n<p>Installing nose is simple.</p>\n<div class=\"highlight-python\"><pre>$ pip install nose</pre>\n</div>\n<p>Once installed, we can generate our xUnit report with a single command.</p>\n<div class=\"highlight-python\"><pre>$ nosetests test_tablib.py --with-xunit</pre>\n</div>\n<p>This will generate a <strong>nosetests.xml</strong> file, which can then be analyzed.</p>\n</div>\n<div class=\"section\" id=\"continuous-integration\">\n<span id=\"hudson\"></span><h2>Continuous Integration<a class=\"headerlink\" href=\"#continuous-integration\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Every commit made to the <strong>develop</strong> branch is automatically tested and inspected upon receipt with <a class=\"reference external\" href=\"http://hudson.dev.java.net\">Hudson CI</a>. If you have access to the main repository and broke the build, you will receive an email accordingly.</p>\n<p>Anyone may view the build status and history at any time.</p>\n<blockquote>\n<div><a class=\"reference external\" href=\"http://git.kennethreitz.com/ci/\">http://git.kennethreitz.com/ci/</a></div></blockquote>\n<p>If you are trustworthy and plan to contribute to tablib on a regular basis, please contact <a class=\"reference external\" href=\"http://kennethreitz.com/contact-me/\">Kenneth Reitz</a> to get an account on the Hudson Server.</p>\n<p>Additional reports will also be included here in the future, including <span class=\"target\" id=\"index-1\"></span><a class=\"pep reference external\" href=\"http://www.python.org/dev/peps/pep-0008\"><strong>PEP 8</strong></a> checks and stress reports for extremely large datasets.</p>\n</div>\n<div class=\"section\" id=\"building-the-docs\">\n<span id=\"docs\"></span><h2>Building the Docs<a class=\"headerlink\" href=\"#building-the-docs\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Documentation is written in the powerful, flexible, and standard Python documentation format, <a class=\"reference external\" href=\"http://docutils.sourceforge.net/rst.html\">reStructured Text</a>.\nDocumentation builds are powered by the powerful Pocoo project, <a class=\"reference external\" href=\"http://sphinx.pocoo.org\">Sphinx</a>. The <a class=\"reference internal\" href=\"../api/#api\"><em>API Documentation</em></a> is mostly documented inline throughout the module.</p>\n<p>The Docs live in <tt class=\"docutils literal\"><span class=\"pre\">tablib/docs</span></tt>. In order to build them, you will first need to install Sphinx.</p>\n<div class=\"highlight-python\"><pre>$ pip install sphinx</pre>\n</div>\n<p>Then, to build an HTML version of the docs, simply run the following from the <strong>docs</strong> directory:</p>\n<div class=\"highlight-python\"><pre>$ make html</pre>\n</div>\n<p>Your <tt class=\"docutils literal\"><span class=\"pre\">docs/_build/html</span></tt> directory will then contain an HTML representation of the documentation, ready for publication on most web servers.</p>\n<p>You can also generate the documentation in <strong>ebpub</strong>, <strong>latex</strong>, <strong>json</strong>, <em>&amp;c</em> similarly.</p>\n<div class=\"admonition-github-pages admonition \">\n<p class=\"first admonition-title\">GitHub Pages</p>\n<p>To push the documentation up to <a class=\"reference external\" href=\"http://pages.github.com\">GitHub Pages</a>, you will first need to run <a class=\"reference external\" href=\"http://github.com/michaeljones/sphinx-to-github\">sphinx-to-github</a> against your <tt class=\"docutils literal\"><span class=\"pre\">docs/_build/html</span></tt> directory.</p>\n<p>GitHub Pages are powered by an HTML generation system called <a class=\"reference external\" href=\"http://github.com/mojombo/jekyll\">Jeckyl</a>, which is configured to ignore files and folders that begin with &#8220;<tt class=\"docutils literal\"><span class=\"pre\">_</span></tt>&#8221; (<em>ie.</em> <strong>_static</strong>).</p>\n<blockquote>\n<div>and <a class=\"reference external\" href=\"http://github.com/michaeljones/sphinx-to-github\">sphinx-to-github</a>.</div></blockquote>\n<p>Installing sphinx-to-github is simple.</p>\n<div class=\"highlight-python\"><pre>$ pip install sphinx-to-github</pre>\n</div>\n<p>Running it against the docs is even simpler.</p>\n<div class=\"highlight-python\"><pre>$ sphinx-to-github _build/html</pre>\n</div>\n<p class=\"last\">Move the resulting files to the <strong>gh-pages</strong> branch of your repository, and push it up to GitHub.</p>\n</div>\n<hr class=\"docutils\" />\n<p>Make sure to check out the <a class=\"reference internal\" href=\"../api/#api\"><em>API Documentation</em></a>.</p>\n</div>\n</div>\n", "display_toc": true, "title": "Development", "sourcename": "development.txt", "customsidebar": null, "current_page_name": "development", "next": {"link": "../api/", "title": "API"}, "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["api", "API", "N", "next"], ["tutorial", "Quickstart", "P", "previous"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Development</a><ul>\n<li><a class=\"reference internal\" href=\"#design-considerations\">Design Considerations</a></li>\n<li><a class=\"reference internal\" href=\"#source-control\">Source Control</a><ul>\n<li><a class=\"reference internal\" href=\"#git-branch-structure\">Git Branch Structure</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#adding-new-formats\">Adding New Formats</a><ul>\n<li><a class=\"reference internal\" href=\"#coding-by-convention\">Coding by Convention</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#testing-tablib\">Testing Tablib</a></li>\n<li><a class=\"reference internal\" href=\"#continuous-integration\">Continuous Integration</a></li>\n<li><a class=\"reference internal\" href=\"#building-the-docs\">Building the Docs</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../tutorial/", "title": "Quickstart"}, "metatags": ""}